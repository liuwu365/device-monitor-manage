<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.device.dao.BackUserMapper">
    <resultMap id="BaseResultMap" type="com.device.api.entity.backrole.BackUser">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="credentials_salt" property="credentialsSalt" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="locked" property="locked" jdbcType="BIT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="roleId" property="roleId" jdbcType="BIGINT"/>
        <result column="name" property="roleName" jdbcType="VARCHAR"/>
        <collection property="roleList" ofType="com.device.api.entity.backrole.BackUserRoleKey">
            <id column="role_id" property="roleId" jdbcType="BIGINT"/>
        </collection>

    </resultMap>
    <sql id="Base_Column_List">
    id, user_name, account_name, password, credentials_salt,email, description, locked, create_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
            a.id,
            a.user_name,
            a.account_name,
            a.password,
            a.credentials_salt,
            a.email,
            a.description,
            a.locked,
            a.create_time,
            b.role_id
        FROM back_user a
            LEFT JOIN back_user_role b ON a.id = b.user_id
        WHERE id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from back_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.device.api.entity.backrole.BackUser">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into back_user (user_name, account_name, password,
        credentials_salt,email, description, locked,create_time)
        values (#{userName,jdbcType=VARCHAR}, #{accountName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{credentialsSalt,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
        #{locked,jdbcType=BIT},#{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.device.api.entity.backrole.BackUser">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into back_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                user_name,
            </if>
            <if test="accountName != null">
                account_name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="credentialsSalt != null">
                credentials_salt,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="locked != null">
                locked,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="accountName != null">
                #{accountName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="credentialsSalt != null">
                #{credentialsSalt,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="locked != null">
                #{locked,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.device.api.entity.backrole.BackUser">
        update back_user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="accountName != null">
                account_name = #{accountName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="credentialsSalt != null">
                credentials_salt = #{credentialsSalt,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="locked != null">
                locked = #{locked,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.device.api.entity.backrole.BackUser">
    update back_user
    set user_name = #{userName,jdbcType=VARCHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      credentials_salt = #{credentialsSalt,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      locked = #{locked,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectPage" resultMap="BaseResultMap" parameterType="com.device.api.entity.Page">
        select
        a.id, a.user_name, a.account_name,a.email, a.description, a.locked, a.create_time,c.id roleId,c.name
        from back_user a
        left join back_user_role b on a.id = b.user_id
        left join back_role c on b.role_id = c.id
        <where>
            <if test="filter.user_name != null and filter.user_name != ''">
                AND user_name like CONCAT('%', #{filter.user_name}, '%')
            </if>
            <if test="filter.account_name != null and filter.account_name != ''">
                AND account_name like CONCAT('%', #{filter.account_name}, '%')
            </if>
        </where>
        order by a.id desc
    </select>
    <select id="selectByAccountName" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
            id,
            user_name,
            account_name,
            password,
            email,
            credentials_salt,
            locked
        FROM back_user
        WHERE account_name = #{accountName}
    </select>
    <select id="selectByUserName" resultType="com.device.api.entity.backrole.BackUser">
        SELECT *
        FROM back_user
        WHERE user_name = #{userName}
    </select>

</mapper>